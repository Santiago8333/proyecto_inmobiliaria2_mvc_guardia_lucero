@model List<proyecto_inmobiliaria2_mvc_guardia_lucero.Models.Contratos>
@{
    ViewData["Title"] = "Contratos";
}
<div class="container mt-5" style="padding-top: 10px;">
<div class="row">
<div class="col-md-12 history bg-light border-right">
<h1>Contratos</h1>
<div class="table-responsive">
<table class="table table-hover table-sm">
<thead>
    <tr>
    <th scope="col">#</th>
    <th scope="col">Email inquilino</th>
    <th scope="col">Direccion</th>
    <th scope="col">Monto total</th>
    <th scope="col">Meses</th>
    <th scope="col">Fecha desde</th>
    <th scope="col">Fecha hasta</th>
    <th scope="col">Fecha_creacion</th>
    <th scope="col">Creado por</th>
    <th scope="col">Terminado por</th>
    <th scope="col">Estado</th>
    <th scope="col">Accion</th>
    </tr>
</thead>
<tbody>
@if (Model != null && Model.Any())
{
    int i = 1;
    foreach (var p in Model)
    {
    if(p.Estado){
        <tr>
            <td>@i</td>
            <td>@Html.DisplayFor(modelp => p.EmailInquilino)</td>
            <td>@Html.DisplayFor(modelp => p.DireccionInmueble)</td>
            <td>@Html.DisplayFor(modelp => p.Monto_total)</td>
            <td>@Html.DisplayFor(modelp => p.Meses)</td>
            <td>@p.Fecha_desde.ToString("dd/MM/yyyy")</td>
            <td>@p.Fecha_hasta.ToString("dd/MM/yyyy")</td>
            <td>@p.Fecha_creacion.ToString("dd/MM/yyyy")</td>
            @if (User.IsInRole("Administrador"))
                {
                    <td>@Html.DisplayFor(modelp => p.Creado_por)</td>
                    <td>@Html.DisplayFor(modelp => p.Terminado_por)</td>
                }
            <td>@(p.Estado ? "Activo" : "Cancelado")</td>
            <td>
    <div class="dropdown position-static">
        <button class="btn btn-sm btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-three-dots-vertical"></i> <!-- Icono de 3 puntos -->
        </button>
        <ul class="dropdown-menu">
            <li>
                <a class="dropdown-item" asp-action="Edicion" asp-route-id="@p.Id_contrato" title="Editar">
                     <i class="fa-solid fa-pencil"></i> Modificar
                </a>
            </li>
             <li>
                <a class="dropdown-item" asp-action="Detalle" asp-route-id="@p.Id_contrato" title="Detalle">
                     <i class="fa-solid fa-book"></i> Detalle
                </a>
            </li>
             <li>
                <a class="dropdown-item" asp-action="Pago" asp-route-id="@p.Id_contrato" title="Pago">
                     <i class="fa-solid fa-money-bill"></i> Pagos
                </a>
            </li>
            <li>
                <a href="javascript:void(0);" 
                      data-id="@p.Id_contrato" 
                      class="dropdown-item" 
                      onclick="confirmCancelar(this)">
                        <i class="fa-solid fa-x"></i> Cancelar
                  </a>
            </li>
        </ul>
    </div>
</td>
        </tr>
        i++;
    }else{
            <tr class="table-danger"> 
            <td>@i</td>
            <td>@Html.DisplayFor(modelp => p.EmailInquilino)</td>
            <td>@Html.DisplayFor(modelp => p.DireccionInmueble)</td>
            <td>@Html.DisplayFor(modelp => p.Monto_total)</td>
            <td>@Html.DisplayFor(modelp => p.Meses)</td>
            <td>@p.Fecha_desde.ToString("dd/MM/yyyy")</td>
            <td>@p.Fecha_hasta.ToString("dd/MM/yyyy")</td>
            <td>@p.Fecha_creacion.ToString("dd/MM/yyyy")</td>
            @if (User.IsInRole("Administrador"))
                {
                    <td>@Html.DisplayFor(modelp => p.Creado_por)</td>
                    <td>@Html.DisplayFor(modelp => p.Terminado_por)</td>
                }
            <td>@(p.Estado ? "Activo" : "Cancelado")</td>
            <td>
    <div class="dropdown position-static">
        <button class="btn btn-sm btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-three-dots-vertical"></i> <!-- Icono de 3 puntos -->
        </button>
        <ul class="dropdown-menu">
            <li>
                <a class="dropdown-item" asp-action="Edicion" asp-route-id="@p.Id_contrato" title="Editar">
                     <i class="fa-solid fa-pencil"></i> Modificar
                </a>
            </li>
             <li>
                <a class="dropdown-item" asp-action="Detalle" asp-route-id="@p.Id_contrato" title="Detalle">
                     <i class="fa-solid fa-book"></i> Detalle
                </a>
            </li>
             <li>
                <a class="dropdown-item" asp-action="Pago" asp-route-id="@p.Id_contrato" title="Pago">
                     <i class="fa-solid fa-money-bill"></i> Pagos
                </a>
            </li>
            <li>
                @if (User.IsInRole("Administrador"))
                {
                <a href="javascript:void(0);" 
                      data-id="@p.Id_contrato" 
                      class="dropdown-item" 
                      onclick="confirmDelete(this)">
                        <i class="fa-solid fa-trash"></i> Eliminar
                  </a>
                  }
            </li>
        </ul>
    </div>
</td>
        </tr>
        i++;
        }
    }
}
else
{
    <tr>
        <td colspan="8" class="text-center text-muted">No hay propietarios cargados</td>
    </tr>
}
</tbody>
</table>
</div>
<button type="button" class="btn btn-primary agregar" data-bs-toggle="modal" data-bs-target="#agregarModal"><i class="fa-solid fa-plus"></i></button>
</div>
</div>
</div>
<!-- PAGINACIÓN -->
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <!-- Botón Anterior -->
        <li class="page-item @(ViewBag.PaginaActual == 1 || !ViewBag.Registros ? "disabled" : "")">
            <a class="page-link" 
               href="@Url.Action("Index", new { pagina = ViewBag.PaginaActual - 1 })" 
               tabindex="-1">
                Anterior
            </a>
        </li>

        <!-- Números de página -->
        @for (int i = 1; i <= ViewBag.TotalPaginas; i++)
        {
            <li class="page-item @(i == ViewBag.PaginaActual ? "active" : "")">
                <a class="page-link" href="@Url.Action("Index", new { pagina = i })">@i</a>
            </li>
        }

        <!-- Botón Siguiente -->
        <li class="page-item @(ViewBag.PaginaActual == ViewBag.TotalPaginas || !ViewBag.Registros ? "disabled" : "")">
            <a class="page-link" 
               href="@Url.Action("Index", new { pagina = ViewBag.PaginaActual + 1 })">
                Siguiente
            </a>
        </li>
    </ul>
</nav>
<!-- Modal -->
<div class="modal fade" id="agregarModal" tabindex="-1" aria-labelledby="agregarModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="agregarModalLabel">Agregar Contrato</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
<form asp-action="Agregar" method="post" class="needs-validation" novalidate>
    <div class="mb-3">
        <label for="InputEmailInquilino" class="form-label">Email Inquilino</label>
        <input class="form-control" list="inquilinoList" id="InputEmailInquilino" name="EmailInquilino" required>
        <datalist id="inquilinoList">
    
        </datalist>
        
        <input type="hidden" id="Id_inquilino" name="Id_inquilino">
        <div class="invalid-feedback">El Email del inquilino es obligatorio.</div>
    </div>
  <div class="mb-3">
    <label for="InputDireccionInmueble" class="form-label">Direccion Inmueble</label>
        <input class="form-control" list="inmuebleList" id="InputDireccionInmueble" name="DireccionInmueble" required>
        <datalist id="inmuebleList">
        </datalist>
  <input type="hidden" id="Id_inmueble" name="Id_inmueble">
   <div class="invalid-feedback">El Direccion del Inmueble es obligatorio.</div>
  </div>
    <div class="mb-3">
        <label for="InputMonto" class="form-label">Monto</label>
        <input type="text" class="form-control" id="InputMonto" name="Monto" required>
        <div class="invalid-feedback">El Monto es obligatorio.</div>
    </div>

    <div class="mb-3">
         <label for="exampleInputFecha_desde" class="form-label">Fecha desde</label>
        <input type="date" class="form-control" id="exampleInputFecha_desde" name="Fecha_desde" >
        <div class="invalid-feedback">El Fecha desde es obligatorio.</div>
    </div>

    <div class="mb-3">
        <label for="exampleInputFecha_hasta" class="form-label">Fecha hasta</label>
        <input type="date" class="form-control" id="exampleInputFecha_hasta" name="Fecha_hasta" readonly>
        <div class="invalid-feedback">Ingrese un Fecha hasta válido.</div>
    </div>
    <div class="mb-3">
        <label for="exampleInputMeses" class="form-label">Duración del contrato (meses)</label>
            <input type="number" class="form-control" id="exampleInputMeses" name="Meses" min="1" max="600" value="1" >
        <div class="invalid-feedback">Ingrese un Meses hasta válido.</div>
    </div>
    <div class="mb-3">
            <label for="exampleInputMonto_a_pagar" class="form-label">Monto mensual</label>
            <input type="text" class="form-control" id="exampleInputMonto_a_pagar"  name="Monto_a_pagar"  readonly>
        </div>
         <div class="mt-3">
              <label for="exampleInputMonto_total" class="form-label">Monto Total</label>
              <input type="number" class="form-control" id="exampleInputMonto_total" name="Monto_total" readonly >
          </div>

    <button type="submit" class="btn btn-primary">Agregar</button>
</form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
  <div id="successToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <strong class="me-auto">Sistema</strong>
      <small class="text-muted">justo ahora</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Cerrar"></button>
    </div>
    <div class="toast-body">
      @TempData["Mensaje"]
    </div>
  </div>
</div>
<!-- Modal eliminar-->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmDeleteModalLabel">Confirmar Eliminación</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        ¿Estás seguro de que deseas eliminar este Contrato?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <a id="confirmDeleteButton" href="#" class="btn btn-danger">Eliminar</a>
      </div>
    </div>
  </div>
</div>
<!-- Modal Cancelar-->
<div class="modal fade" id="confirmCancelarModal" tabindex="-1" aria-labelledby="confirmCancelarModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmCancelarModalLabel">Confirmar Cancelar</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        ¿Estás seguro de que deseas Cancelar este Contrato?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <a id="confirmCancelarButton" href="#" class="btn btn-danger">Cancelar Contrato</a>
      </div>
    </div>
  </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var toastElement = document.getElementById("successToast");
        var toast = new bootstrap.Toast(toastElement);
        
        @if (TempData["Mensaje"] != null)
        {
            <text>
                toast.show();
            </text>
        }
   
    });
    function confirmDelete(element) {
        var id = element.getAttribute("data-id");
        var url = "@Url.Action("Eliminar", "Contrato")" + "/" + id;
        document.getElementById("confirmDeleteButton").setAttribute("href", url);
        var myModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
        myModal.show();
    }
    function confirmCancelar(element) {
        var id = element.getAttribute("data-id");
        var url = "@Url.Action("Cancelar", "Contrato")" + "/" + id;
        document.getElementById("confirmCancelarButton").setAttribute("href", url);
        var myModal = new bootstrap.Modal(document.getElementById('confirmCancelarModal'));
        myModal.show();
    }
const inputEmail = document.getElementById("InputEmailInquilino");
const hiddenId = document.getElementById("Id_inquilino");
const dataList = document.getElementById("inquilinoList");

let timeout = null;

inputEmail.addEventListener("input", function () {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
        fetch(`/Inquilino/Buscar?term=${encodeURIComponent(inputEmail.value)}`)
            .then(res => res.json())
            .then(data => {
                dataList.innerHTML = "";

                data.forEach(p => {
                    let option = document.createElement("option");
                    option.value = p.email;
                    option.dataset.id = p.id_inquilino;
                    dataList.appendChild(option);
                });

                // solo después de llenar el datalist, seteo el hidden
                const option = Array.from(dataList.options).find(opt => opt.value === inputEmail.value);
                hiddenId.value = option ? option.dataset.id : "";
            });
    }, 300);
});

inputEmail.addEventListener("change", function () {
    const option = Array.from(dataList.options).find(opt => opt.value === inputEmail.value);
    hiddenId.value = option ? option.dataset.id : "";
});

// =====================================================

const inputDireccion = document.getElementById("InputDireccionInmueble");
const hiddenId2 = document.getElementById("Id_inmueble");
const dataList2 = document.getElementById("inmuebleList");

let timeout2 = null;

inputDireccion.addEventListener("input", function () {
    clearTimeout(timeout2);
    timeout2 = setTimeout(() => {
        fetch(`/Inmueble/Buscar?term=${encodeURIComponent(inputDireccion.value)}`)
            .then(res => res.json())
            .then(data => {
                dataList2.innerHTML = "";

                data.forEach(p => {
                    let option = document.createElement("option");
                    option.value = p.direccion;
                    option.dataset.id = p.id_inmueble;
                    dataList2.appendChild(option);
                });

                // solo después de llenar el datalist, seteo el hidden
                const option = Array.from(dataList2.options).find(opt => opt.value === inputDireccion.value);
                hiddenId2.value = option ? option.dataset.id : "";
            });
    }, 500);
});

inputDireccion.addEventListener("change", function () {
    const option = Array.from(dataList2.options).find(opt => opt.value === inputDireccion.value);
    hiddenId2.value = option ? option.dataset.id : "";
});
//logica contrato
    // Escuchar cambios en meses y en fecha desde
    document.getElementById('exampleInputMeses').addEventListener('input', calcularFechaHastaYMontoTotal);
    document.getElementById('exampleInputFecha_desde').addEventListener('change', calcularFechaHastaYMontoTotal);
    document.getElementById('InputMonto').addEventListener('input', calcularFechaHastaYMontoTotal);

    function calcularFechaHastaYMontoTotal() {
        var fechaInicio = document.getElementById('exampleInputFecha_desde').value;
        var meses = parseInt(document.getElementById('exampleInputMeses').value);
        var montoMensual = parseFloat(document.getElementById('InputMonto').value);

        if (fechaInicio && meses > 0 && !isNaN(montoMensual)) {
            var fechaObj = new Date(fechaInicio);

            // Calcular nueva fecha sumando meses
            fechaObj.setMonth(fechaObj.getMonth() + meses);

            var year = fechaObj.getFullYear();
            var month = ('0' + (fechaObj.getMonth() + 1)).slice(-2);
            var day = ('0' + fechaObj.getDate()).slice(-2);

            var fechaHastaFormateada = `${year}-${month}-${day}`;
            document.getElementById('exampleInputFecha_hasta').value = fechaHastaFormateada;

            // Calcular monto total
            var montoTotal = meses * montoMensual;
            document.getElementById('exampleInputMonto_total').value = montoTotal;

            // Mostrar monto mensual (por si quieres recalcular)
            document.getElementById('exampleInputMonto_a_pagar').value = montoMensual;
        } else {
            document.getElementById('exampleInputFecha_hasta').value = '';
            document.getElementById('exampleInputMonto_total').value = '';
            document.getElementById('exampleInputMonto_a_pagar').value = '';
        }
    }
</script>
